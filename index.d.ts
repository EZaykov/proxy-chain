/** Declaration file generated by dts-gen */

export class Server {
    constructor(options: any);

    close(closeConnections: any, callback: any): any;

    failRequest(request: any, err: any, handlerOpts: any): void;

    getConnectionIds(): any;

    getConnectionStats(connectionId: any): any;

    handlerRun(handler: any): void;

    listen(callback: any): any;

    log(handlerId: any, str: any): void;

    onClientError(err: any, socket: any): void;

    onConnect(request: any, socket: any, head: any): void;

    onRequest(request: any, response: any): void;

    prepareRequestHandling(request: any): any;

    sendResponse(socket: any, statusCode: any, headers: any, message: any): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;

}

export function RequestError(message: any, statusCode: any, headers: any): any;

export function anonymizeProxy(proxyUrl: any, callback: any): any;

export function closeAnonymizedProxy(anonymizedProxyUrl: any, closeConnections: any, callback: any): any;

export function closeTunnel(serverPath: any, closeConnections: any, callback: any): any;

export function createTunnel(proxyUrl: any, targetHost: any, ...args: any[]): any;

export function parseUrl(url: any): any;

export function redactParsedUrl(parsedUrl: any, ...args: any[]): any;

export function redactUrl(url: any, passwordReplacement: any): any;

export namespace RequestError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

}

export namespace Server {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static usingDomains: boolean;

    }

}

